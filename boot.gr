# =============================================================
# Output

println "Welcome to Grad!"
println "Various numbers can be passed to print: ", 42, "; ", 3.14

# =============================================================
# Variables

my_var = 42     # create a variable,
my_var = null   # and remove it!

# assign any possible type of value to a variable:
my_var = "string"   # string,
my_var = 3.14       # float,
my_var = 42         # and integer
# floats and integers are always signed 32-bit numbers,
# strings are UTF-8 encoded.

# compound assignment operators are supported as well (+=, -=, *=, etc)
# please note that they are look differently unlike other languages:
my_var = 0      # assignment (init)
my_var + 4      # add
my_var - 2      # substract
my_var * 8      # multiply
my_var / 4      # divide
my_var ^ 2      # exponent
my_var % 16     # remainder
# now let's check our calculations:
# (the last remainder operation must return 0)
assert_eq my_var, 0

# negative values:
my_var = -42
assert_eq my_var, -42

# floating point:
my_var = -4.2
assert_eq my_var, -4.2

# check that variable exists:
assert_exists my_var

# delete multiple variables at once with the `nullean` function:
var_1 = 1
var_2 = 22
nullean var_1 var_2 my_var

# =============================================================
# Control flow

if 1 == 1
    if 1
        if true
            println "Hello from `if`!"
            if false
                println "[nothing here]"
            end
        end
    end
end

# simple repeat pattern:
i = 0
max = 10
while i < max
    i + 1
end
nullean max i

if true
    if true
        # variable defined in this scope ...
        hidden = 42
    end
    # ... is unaccessible in outer scope!
    # this will fail:
    # assert_exists hidden
end

# =============================================================
# Special functions

# prints all existing variables at the moment:
dbg_vars
